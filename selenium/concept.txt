WebDriver:
	WebDriver uses browser automation APIs provided by browser vendors to control browser and run tests.
	 Since WebDriver does not require its API to be compiled with application(the developing project to be test) code, it is not intrusive in nature. Hence, you are testing the same application which you push live.
	WebDriver’s aim is to emulate a real user’s interaction with the browser as closely as possible.
	
selenium IDE:
	 It’s an easy-to-use Chrome and Firefox extension and is generally the most efficient way to develop test cases.

API: 
	Application Programming Interface. This is the set of “commands” you use to manipulate WebDriver.
	
Library: 
	A code module which contains the APIs and the code necessary to implement them. Libraries are specific to each language binding, eg .jar files for Java, .dll files for .NET, etc.

Driver:
	Responsible for controlling the actual browser. Drivers are generally executable modules that run on the system with the browser itself, not on the system executing the test suite. (Although those may be the same system.) NOTE: Some people refer to the drivers as proxies.
	 Since many of the driver implementations are provided by third parties, they are not included in the standard Selenium distribution.

Driver requirements
	Most drivers require an extra executable for Selenium to communicate with the browser.

Framework: 
	An additional library used as a support for WebDriver suites. These frameworks may be test frameworks such as JUnit or NUnit.

Framework: 
	An additional library used as a support for WebDriver suites. These frameworks may be test frameworks such as JUnit or NUnit.Frameworks may also be written and used for things such as manipulating or configuring the system under test, data creation, test oracles, etc.

WebDriver:
	WebDriver has one job and one job only: communicate with the browser

Test frameworks:
	Test frameworkds responsible for running and executing your WebDriver and related steps in your tests. example: Cucumber, Robotium

