----- this is basic ----
create project(laravel installation)
    laravel new blog(project name)
Directory Permissions
   storage  bootstrap/cache
Application Key
    A application is bind to a application.
    If you installed Laravel via Composer or the Laravel installer, this key has already been set for you by the  php artisan key:generate command.
    Typically, this string should be 32 characters long. The key can be set in the .env environment file. If you have not renamed the .env.example file to .env.
    If the application key is not set, your user sessions and other encrypted data will not be secure!
Config
    Laravel needs almost no other configuration out of the box. 
	.env
	.env.example
Nginx
    location / {
	try_files $uri $uri/ /index.php?$query_string;
    }

---- Request life cycle ----

request
	Http kernel
	console kernel (app/Http/Kernel.php) 


Http kernel 
	define array of bootstrappers
	define a list of middleware

kerenl boostrapper
	load service providers

service providers
	Service providers are truly the key to bootstrapping a Laravel application. The application instance is created, the service providers are registered, and the request is handed to the bootstrapped application. It's really that simple!
	configured in the config/app.php
	default service providers
		 stored in the  app/Providers directory. 
		
router
	the Request will be handed off to the router for dispatching. The router will dispatch the request to a route or controller, as well as run any route specific middleware.

---- Service Container ----

service container 
	is a powerful tool for managing class dependencies and performing dependency injection.
	will be registered within service providers.
	Within a service provider, you always have access to the container via the $this->app property.

Binding
	We can register a binding using the bind method, passing the class or interface name that we wish to register along with a Closure that returns an instance of the class:
	$this->app->bind('HelpSpot\API', function ($app) {
   	 return new HelpSpot\API($app->make('HttpClient'));
	});
	Note that we receive the container itself as an argument to the resolver(maybe is the anonymous function). We can then use the container to resolve sub-dependencies of the object we are building.
Binding
	
Resolve 
	create object binded to contaner
	You may use the make method to resolve a class instance out of the container. The  make method accepts the name of the class or interface you wish to resolve

Tagging
	resolve all of a certain "category" of binding

Container Events
	The service container fires an event each time it resolves an object.

---- serrvice provider ----

service provider
	Service providers are the central place of all Laravel application bootstrapping. Your own dapplication, as well as all of Laravel's core services are bootstrapped via service providers.
	If you open the config/app.php file included with Laravel, you will see a providers array. 	
	The Artisan CLI can generate a new provider via the make:provider command:php artisan make:provider RiakServiceProvider

ServiceProvider.Register
	As mentioned previously, within the register method, you should only bind things into the service container

Service.Boot
	This method is called after all other service providers have been registered, meaning you have access to all other services that have been registered by the framework.

Registering Providers
	All service providers are registered in the config/app.php configuration file.

Facades
	Facades provide a "static" interface to classes that are available in the application's service container.Laravel ships with many facades which provide access to almost all of Laravel's features. 

Contracts
	Laravel's Contracts are a set of interfaces that define the core services provided by the framework. 

---- routing ----
Basic Routing
	The most basic Laravel routes accept a URI and a Closure
	Route::get('foo', function () {
    	return 'Hello World';
	});

All Laravel routes are defined in your route files, which are located in the routes directory. These files are automatically loaded by the framework.


/routes/web.php
	defines routes that are for your web interface. These routes are assigned the web middleware group, which provides features like session state and CSRF protection. The routes in routes/api.php are stateless and are assigned the api middleware group.
	The routes defined in routes/web.php may be accessed by entering the defined route's URL in your browser.
	http://your-app.test/user in your browser:
	Route::get('/user', 'UserController@index');	

/routes/api.php	
	Routes defined in the routes/api.php file are nested within a route group by the  RouteServiceProvider. Within this group, the /api URI prefix is automatically applied 	

---- Controllers ----

Controllers:
	Controllers can group related request handling logic into a single class. Controllers are stored in the  app/Http/Controllers directory.

BasicControllers
	Note that the controller extends the base controller class included with Laravel
	namespace App\Http\Controllers;
	use App\User;
	use App\Http\Controllers\Controller;

	class UserController extends Controller
	{
    	public function show($id)
	    {
      	  return view('user.profile', ['user' => User::findOrFail($id)]);
  	  	}
	}			

Controllers & Namespaces
	RouteServiceProvider loads your route files within a route group that contains the namespace, we only specified the portion of the class name that comes after the App\Http\Controllers portion of the namespace.
	if your full controller class is App\Http\Controllers\Photos\AdminController, you should register routes to the controller like so:
	Route::get('foo', 'Photos\AdminController@method');

---- Views ---
Views are stored in the resources/views directory.
example
	<html>
    	<body>
        	<h1>Hello, {{ $name }}</h1>
	    </body>
	</html>
Since this view is stored at resources/views/greeting.blade.php, we may return it using the global view helper like so:
Route::get('/', function () {
    return view('greeting', ['name' => 'James']);
});

if your view is stored at resources/views/admin/profile.blade.php, you may reference it like so:

return view('admin.profile', $data);

---- middleware ----
Middleware
	provide a convenient mechanism for filtering HTTP requests entering your application. For example, Laravel includes a middleware that verifies the user of your application is authenticated.
	All of these middleware are located in the  app/Http/Middleware directory.

Defining Middleware
	php artisan make:middleware CheckAge	


---- validation ----

Introduction
	Laravel provides several different approaches to validate.By default, Laravel's base controller class uses a ValidatesRequests trait

